<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>saga</title>
      <link href="/2020/02/26/redux-thunk-he-saga/"/>
      <url>/2020/02/26/redux-thunk-he-saga/</url>
      
        <content type="html"><![CDATA[<h3 id="saga"><a href="#saga" class="headerlink" title="saga"></a>saga</h3><p>解决异步问题，和redux-thunk一样</p><blockquote><p>在src下面新建一个store 文件夹，创建四个文件，</p><p>actionCreate.js   主要用来派发action</p><p>index.js      创建数据仓库，导出store</p><p>reducer.js     实现多库模式，为事件处理文件通过派发的action的type来触发不同的处理</p><p>saga.js   用来实现异步的处理</p></blockquote><p>下载redux-saga 模块</p><pre class=" language-js"><code class="language-js">yarn add redux<span class="token operator">-</span>saga</code></pre><p><strong>actionCreate.js 文件</strong></p><p>我们利用redux-thunk的时候，需要return一个函数，把dispatch传进去，然后dispatch派发action，利用saga则不用，直接return派发action,这个type是触发saga.js中的生成器函数的，在生成器函数中真正派发 动作来改变数据</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 异步操作使用thunk</span>  <span class="token comment" spellcheck="true">// getListState() {</span>  <span class="token comment" spellcheck="true">//   return (dispatch) => {</span>  <span class="token comment" spellcheck="true">//     fetch("http://localhost:4000/list").then(res => res.json()).then(res => {</span>  <span class="token comment" spellcheck="true">//       console.log(res);</span>  <span class="token comment" spellcheck="true">//       dispatch({</span>  <span class="token comment" spellcheck="true">//         type: "HHHH",</span>  <span class="token comment" spellcheck="true">//         list: res</span>  <span class="token comment" spellcheck="true">//       })</span>  <span class="token comment" spellcheck="true">//     })</span>  <span class="token comment" spellcheck="true">//   }</span>  <span class="token comment" spellcheck="true">// },</span>  <span class="token comment" spellcheck="true">// *******************************使用saga**************************************</span>  <span class="token function">getListState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"WATCH"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"SAGACLEAN"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// *******************************使用saga**************************************</span>  <span class="token comment" spellcheck="true">// clean() {</span>  <span class="token comment" spellcheck="true">//   return (dispatch) => {</span>  <span class="token comment" spellcheck="true">//     setTimeout(() => {</span>  <span class="token comment" spellcheck="true">//       dispatch({</span>  <span class="token comment" spellcheck="true">//         type: "CLEAN"</span>  <span class="token comment" spellcheck="true">//       })</span>  <span class="token comment" spellcheck="true">//     }, 3000);</span>  <span class="token comment" spellcheck="true">//   }</span>  <span class="token comment" spellcheck="true">// },</span>  <span class="token function">addCart</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"ADD"</span><span class="token punctuation">,</span>      payload<span class="token punctuation">:</span> p    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">inc</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"INC"</span><span class="token punctuation">,</span>      id<span class="token punctuation">:</span> p    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">dec</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"DEC"</span><span class="token punctuation">,</span>      id<span class="token punctuation">:</span> p    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>reducer.js文件</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token keyword">import</span> ListReducer <span class="token keyword">from</span> <span class="token string">"../components/list/reducer"</span><span class="token keyword">import</span> ShopReducer <span class="token keyword">from</span> <span class="token string">"../components/shop/reducer"</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  ListReducer<span class="token punctuation">,</span>  ShopReducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> reducer</code></pre><p><strong>在index,js文件中导入saga</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore<span class="token punctuation">,</span> applyMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">"./reducer"</span><span class="token keyword">import</span> watchAll <span class="token keyword">from</span> <span class="token string">"./saga"</span>   <span class="token comment" spellcheck="true">//导入saga.js 文件中的生成器函数</span><span class="token keyword">import</span> createSagaMiddleWare <span class="token keyword">from</span> <span class="token string">"redux-saga"</span>  <span class="token comment" spellcheck="true">//导入saga</span><span class="token keyword">const</span> sagaMiddleware <span class="token operator">=</span> <span class="token function">createSagaMiddleWare</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//创建一个saga中间件实例</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>sagaMiddleware<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//利用saga中间件的实例中的run方法运行saga.js中的生成器函数</span>sagaMiddleware<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>watchAll<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><p><strong>saga.js</strong></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> takeEvery<span class="token punctuation">,</span> put<span class="token punctuation">,</span> call <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux-saga/effects"</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://localhost:4000/list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"HHHH"</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//派发真正的事件</span>        list<span class="token punctuation">:</span> result     <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">clean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token punctuation">:</span> <span class="token string">"CLEAN"</span>     <span class="token comment" spellcheck="true">//派发真正的事件</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">watchAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">//接受actionCreate.js 中的type,然后触发生成器函数</span>    <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">"WATCH"</span><span class="token punctuation">,</span> test<span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token function">takeEvery</span><span class="token punctuation">(</span><span class="token string">"SAGACLEAN"</span><span class="token punctuation">,</span> clean<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>在组件中使用</p><p>list 组件</p><p>list中的reducer.js</p><pre><code>const initialState = {  list: []}export default (state = initialState, { type, list }) =&gt; {  switch (type) {    case &quot;HHHH&quot;:      let newState = { ...state };      newState.list = list      return newState    default:      return state  }}</code></pre><p>list 中的List.jsx</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token keyword">import</span> actionCreate <span class="token keyword">from</span> <span class="token string">"../../store/actionCreate"</span><span class="token keyword">import</span> <span class="token string">"./list.css"</span><span class="token keyword">class</span> <span class="token class-name">List</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">getListState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// console.log(this.props)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>ListReducer<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>imgSrc<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>                    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>desc<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                    <span class="token operator">&lt;</span>p<span class="token operator">></span>                      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>addCart<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token operator">...</span>item<span class="token punctuation">,</span> count<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>添加到购物车<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>              <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div <span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> state <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> state<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> actionCreate<span class="token punctuation">)</span><span class="token punctuation">(</span>List<span class="token punctuation">)</span></code></pre><p>shop 组件</p><p>shop的reducer.js 文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>  cart<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> payload<span class="token punctuation">,</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"ADD"</span><span class="token punctuation">:</span>      <span class="token keyword">let</span> newState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>newState<span class="token punctuation">.</span>cart<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        newState<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> idx <span class="token operator">=</span> newState<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> payload<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>idx <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          newState<span class="token punctuation">.</span>cart<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">++</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          newState<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> newState    <span class="token keyword">case</span> <span class="token string">"INC"</span><span class="token punctuation">:</span>      <span class="token keyword">let</span> newStates <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span>      <span class="token keyword">let</span> idxs <span class="token operator">=</span> newStates<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span>      newStates<span class="token punctuation">.</span>cart<span class="token punctuation">[</span>idxs<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">++</span>      <span class="token keyword">return</span> newStates<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"DEC"</span><span class="token punctuation">:</span>      <span class="token keyword">let</span> newStatess <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span>      <span class="token keyword">let</span> idxss <span class="token operator">=</span> newStatess<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> item<span class="token punctuation">.</span>id <span class="token operator">===</span> id<span class="token punctuation">)</span>      newStatess<span class="token punctuation">.</span>cart<span class="token punctuation">[</span>idxss<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token operator">--</span>      <span class="token keyword">return</span> newStatess<span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"CLEAN"</span><span class="token punctuation">:</span>      <span class="token keyword">let</span> nState <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span>      nState<span class="token punctuation">.</span>cart<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>      <span class="token keyword">return</span> nState    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Shop.jsx文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token keyword">import</span> actionCreate <span class="token keyword">from</span> <span class="token string">"../../store/actionCreate"</span><span class="token keyword">class</span> <span class="token class-name">Shop</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>ul<span class="token operator">></span>          <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token punctuation">(</span>                <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>img src<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>imgSrc<span class="token punctuation">}</span> alt<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>                  <span class="token operator">&lt;</span>div<span class="token operator">></span>                    <span class="token operator">&lt;</span>h3<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>                    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>desc<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                    <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>price<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                    <span class="token operator">&lt;</span>p<span class="token operator">></span>                      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>inc<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">++</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                      <span class="token punctuation">{</span>item<span class="token punctuation">.</span>count<span class="token punctuation">}</span>                      <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>dec<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> item<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">--</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>                    <span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>                  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>                <span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>              <span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>          <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>总数量：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">allCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token operator">&lt;</span>h3<span class="token operator">></span>总价格：<span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">allMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h3<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;button onClick={this.props.clean()}>清空&lt;/button> */</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*利用thunk  */</span><span class="token punctuation">}</span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 利用saga */</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>clean<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>清空<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div <span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    cart<span class="token punctuation">:</span> state<span class="token punctuation">.</span>ShopReducer<span class="token punctuation">.</span>cart<span class="token punctuation">,</span>    <span class="token function">allCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//总的数量</span>      <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      state<span class="token punctuation">.</span>ShopReducer<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        s <span class="token operator">+</span><span class="token operator">=</span> item<span class="token punctuation">.</span>count<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">allMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//总的数量</span>      <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      state<span class="token punctuation">.</span>ShopReducer<span class="token punctuation">.</span>cart<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        s <span class="token operator">+</span><span class="token operator">=</span> item<span class="token punctuation">.</span>count <span class="token operator">*</span> item<span class="token punctuation">.</span>price<span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> actionCreate<span class="token punctuation">)</span><span class="token punctuation">(</span>Shop<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> saga </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 状态管理 </tag>
            
            <tag> saga </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态管理之mobx</title>
      <link href="/2020/02/25/mobx/"/>
      <url>/2020/02/25/mobx/</url>
      
        <content type="html"><![CDATA[<h3 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><blockquote><p>首先配置 不需要弹射也可以设置create-react-app里面的webpack配置</p></blockquote><h5 id="安装react-app-rewired-模块"><a href="#安装react-app-rewired-模块" class="headerlink" title="安装react-app-rewired 模块"></a>安装react-app-rewired 模块</h5><pre class=" language-js"><code class="language-js">yarn add react<span class="token operator">-</span>app<span class="token operator">-</span>rewired</code></pre><blockquote><p>在根目录下创建一个  <strong>config-overrides.js</strong> 文件，用于修改默认设置</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// config-overrides.js 文件</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">override</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> env<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//do stuff with the webpack config...</span>  <span class="token keyword">return</span> config<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//替换 package.json 中 scripts 执行部分</span> <span class="token comment" spellcheck="true">/* package.json */</span>  <span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"start"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired start"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired build"</span><span class="token punctuation">,</span>    <span class="token string">"test"</span><span class="token punctuation">:</span> <span class="token string">"react-app-rewired test"</span><span class="token punctuation">,</span>    <span class="token string">"eject"</span><span class="token punctuation">:</span> <span class="token string">"react-scripts eject"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><h5 id="安装customize-cra-模块"><a href="#安装customize-cra-模块" class="headerlink" title="安装customize-cra 模块"></a>安装customize-cra 模块</h5><pre class=" language-js"><code class="language-js">yarn add customize<span class="token operator">-</span>cra </code></pre><h5 id="配置装饰器-安装-babel-plugin-proposal-decorators-模块"><a href="#配置装饰器-安装-babel-plugin-proposal-decorators-模块" class="headerlink" title="配置装饰器 @   安装   @babel/plugin-proposal-decorators    模块"></a>配置装饰器 @   安装   @babel/plugin-proposal-decorators    模块</h5><blockquote><p>配置 config-overrides.js 文件</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> addDecoratorsLegacy<span class="token punctuation">,</span> override<span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'customize-cra'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">override</span><span class="token punctuation">(</span>  <span class="token comment" spellcheck="true">// 添加装饰器</span>  <span class="token function">addDecoratorsLegacy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在这里@修饰符就配好了</p><h4 id="安装-mobx-模块"><a href="#安装-mobx-模块" class="headerlink" title="安装 mobx 模块"></a>安装 mobx 模块</h4><h5 id="创建一个store文件用来存放数据，store文件可以创建多个"><a href="#创建一个store文件用来存放数据，store文件可以创建多个" class="headerlink" title="创建一个store文件用来存放数据，store文件可以创建多个"></a>创建一个store文件用来存放数据，store文件可以创建多个</h5><blockquote><p>利用  mobx  中的  observable   来进行监听  利用action 来派发事件</p><p>@observable 变量名=值  </p><p>@action   方法名=()=&gt;{<br>                     修改数据<br>             }   </p><pre><code> }</code></pre></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> observable<span class="token punctuation">,</span> action <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"mobx"</span><span class="token keyword">class</span> <span class="token class-name">NumStore</span> <span class="token punctuation">{</span>    @observable n <span class="token operator">=</span> <span class="token number">3</span>                  <span class="token comment" spellcheck="true">//这里n 就被监听上了</span>    @action changeData <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//派发事件来进行改变n的数据</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//这里当被组件点击触发的时候，发现值改变了，但是视图不刷新，需要监听</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span>  store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><blockquote><p>创建一个One 组件，在One组件里面使用store的数据</p></blockquote><p>引入 store 这个文件 ，然后就可以使用store里面的方法和数据了</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// One 组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"../../store/index"</span>    <span class="token comment" spellcheck="true">// 引入store</span><span class="token keyword">class</span> <span class="token class-name">One</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>     <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//打印store</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span>store<span class="token punctuation">.</span>n<span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">// n === 3</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">.</span>changeData<span class="token punctuation">}</span> <span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//点击调用store中的action 方法，发现store中的数据改变了，但是视图没更新，所以需要监听</span></code></pre><h5 id="监听-让视图数据也改变-autorun"><a href="#监听-让视图数据也改变-autorun" class="headerlink" title="监听 让视图数据也改变  autorun"></a>监听 让视图数据也改变  autorun</h5><blockquote><p>在组件里面通过 mobx 的autorun 来进行监听 ，可以监听所有的数据变化，，然后将值设置为state,利用state数据达到数据更新</p></blockquote><blockquote><p>注意，这里有两种监听方法</p><p> autorun  监听所有数据的变化  autorun(()=&gt;{})<br> reaction 监听特定数据的变化  reaction(()=&gt;[a,b….],()=&gt;{ })</p><p>监控数据变化<br>      reaction(()=&gt;[变量1，变量2…],()=&gt;{<br>              数组里的数据变化了，就回执行这个回调<br>          })<br>       autorun(()=&gt;{<br>              只要store里的数据变化，就执行这个回调<br>           })</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// One 组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"../../store/index"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> autorun <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"mobx"</span>     <span class="token comment" spellcheck="true">// 引入来进行监听</span><span class="token keyword">class</span> <span class="token class-name">One</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//设置state 来存store 里面的值 n</span>      n<span class="token punctuation">:</span> store<span class="token punctuation">.</span>n   <span class="token comment" spellcheck="true">//store 的初值</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">autorun</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//利用autorun监听store中数据的改变</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        n<span class="token punctuation">:</span> store<span class="token punctuation">.</span>n         <span class="token comment" spellcheck="true">//重新设置state中的值</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>n<span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">//利用state里获得的最新值来渲染页面</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">.</span>changeData<span class="token punctuation">}</span> <span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>     <span class="token comment" spellcheck="true">//调用store中的action来让他++</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> One</code></pre><p>上面写了很多代码进行监听是不是很烦，下面咱们来个简单的</p><h5 id="安装-mobx-react-包。"><a href="#安装-mobx-react-包。" class="headerlink" title="安装  mobx-react  包。"></a>安装  mobx-react  包。</h5><pre class=" language-js"><code class="language-js">yarn add mobx<span class="token operator">-</span>react</code></pre><blockquote><p>导入这个包  import { observer } from “mobx-react”      </p><p>@observer   利用这个来监听   在组件里监控store的数据变化并刷新组件(也是监听所有的数据，只要有变化就执行）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"../../store/index"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> autorun <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"mobx"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> observer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"mobx-react"</span>    <span class="token comment" spellcheck="true">// 利用这个包进行监听</span>@observer                              <span class="token comment" spellcheck="true">//监控仓库里面的数据变化</span><span class="token keyword">class</span> <span class="token class-name">One</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span>store<span class="token punctuation">.</span>n<span class="token punctuation">}</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">.</span>changeData<span class="token punctuation">}</span> <span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> One</code></pre><p>注意： 上面哪种写法需要在每个文件里面引入store</p><blockquote><p>也可以用  mobx-react  里面的   inject 来进行注入store ，这里感觉不如上面好用，就不做介绍了</p><p>import { observer,inject} from ‘mobx-react’;</p><p>@inject(“store”)</p></blockquote><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>store里面的index.js 文件</p><p>展示一下异步操作，还有mobx里的相当于计算属性的</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span>observable<span class="token punctuation">,</span>action<span class="token punctuation">,</span>computed<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'mobx'</span><span class="token keyword">class</span> <span class="token class-name">NumStore</span> <span class="token punctuation">{</span>   @observable n<span class="token operator">=</span><span class="token number">3</span>   @observable list<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>   @computed <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//计算属性</span>       <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token operator">>=</span><span class="token number">18</span><span class="token operator">?</span><span class="token string">"你好先生或女士"</span><span class="token punctuation">:</span><span class="token string">"你好小朋友"</span>   <span class="token punctuation">}</span>   @action    changeData<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token operator">++</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>n<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    @action    getData<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">// 进行异步操作</span>        <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://jsonplaceholder.typicode.com/posts"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span>res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token operator">=</span>res<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NumStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> s<span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mobx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> mobx </tag>
            
            <tag> 状态管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React之Context</title>
      <link href="/2020/02/22/react-zhi-context/"/>
      <url>/2020/02/22/react-zhi-context/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Context 提供了一个无需为每层组件手动添加 props，就能在组件树间进行数据传递的方法。 </p></blockquote><pre class=" language-ja"><code class="language-ja">const Context = React.creatContext(defaultValue);</code></pre><blockquote><p>通过createContext() 创建一个Context ，里面有Provider 和 Consumer, 利用Provider的属性，在其value值将要向下传的数据向下传下去，注意，value不可以更改 ,注意要利用Context 需要将根组件包裹</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// index.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> serviceWorker <span class="token keyword">from</span> <span class="token string">'./serviceWorker'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> MyProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./components/MyProvider"</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>MyProvider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">666</span><span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Router<span class="token operator">></span>      <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>MyProvider<span class="token operator">></span>  <span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//MyProvider.jsx</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component<span class="token punctuation">,</span> createContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">let</span> Context <span class="token operator">=</span> <span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//括号里面可以设置默认数据</span><span class="token keyword">let</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> Consumer <span class="token punctuation">}</span> <span class="token operator">=</span> Context<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyProvider</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>Provider value<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span> MyProvider<span class="token punctuation">,</span> Consumer<span class="token punctuation">,</span> Context <span class="token punctuation">}</span></code></pre><blockquote><p>要想要在子代或者孙子带将context中的provider传的数据拿出来使用，则有两种方法</p></blockquote><p>方法一： 利用Consumer ,标签，里面是一个回调函数，函数的参数就是传递的值</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Consumer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./MyProvider"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">One</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>Consumer<span class="token operator">></span>          <span class="token punctuation">{</span>            <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1<span class="token operator">></span><span class="token punctuation">{</span>value<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Consumer<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>方法二：利用contextType 静态属性，引入要传递的那个context, 然后设置静态属性 contextType, 最后利用this.context能取到传递的值</p><blockquote><p>static contextType = Context </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Context <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./MyProvider"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Two</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token keyword">static</span> contextType <span class="token operator">=</span> Context  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>context<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        Two组件      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Context </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> react高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React生命周期</title>
      <link href="/2020/02/20/react-sheng-ming-zhou-qi/"/>
      <url>/2020/02/20/react-sheng-ming-zhou-qi/</url>
      
        <content type="html"><![CDATA[<h3 id="React-15版本的生命周期"><a href="#React-15版本的生命周期" class="headerlink" title="React 15版本的生命周期"></a>React 15版本的生命周期</h3><blockquote><p>生命周期中的钩子函数（方法，事件）</p></blockquote><pre class=" language-js"><code class="language-js">ComponentWillMount  组件将要渲染<span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>ComponentDidMount   组件渲染完毕ComponentWillReceiveProps  组件将要接受propsShouldComponentUpdate <span class="token punctuation">:</span>  组件接受到新的state或者props，判断组件是否将要重新渲染（更新） 返回<span class="token boolean">true</span> 更新，<span class="token boolean">false</span>不更新componentWillUpdate 组件将要更新componentDidUpdate<span class="token punctuation">:</span> 组件已经更新componentWillUnmount<span class="token punctuation">:</span> 组件将要卸载</code></pre><blockquote><p>我们使用Es6 class 定义组件继承的方式来,创建组件,同时也继承了React组件的生命周期</p><p>所以  函数无状态组件组件,没有生命周期</p></blockquote><h3 id="三个阶段"><a href="#三个阶段" class="headerlink" title="三个阶段"></a>三个阶段</h3><p><strong>初始化阶段</strong> </p><pre class=" language-js"><code class="language-js">constructor              <span class="token comment" spellcheck="true">//组件的初始化工作，如定义this.state的初始内容。</span>componentWillMount       <span class="token comment" spellcheck="true">//在组件挂载到DOM前调用，且只会被调用一次,调用this.setState不会引起组件重新渲</span>render                  <span class="token comment" spellcheck="true">//根据组件的props和state,挂载JSX模板,本身不具备渲染功能</span>componentDidMount       <span class="token comment" spellcheck="true">//组件挂载到DOM后调用，且只会被调用一次,一般用于发送AJAX</span></code></pre><p><strong>数据更新阶段</strong></p><p>​    state状态更新</p><pre class=" language-js"><code class="language-js">componentWillUpdate  组件更新之前render               更新componentDidUpdate   更新之后</code></pre><p>​    props 更新</p><p>​    componentWillReceiveProps(nextProps)</p><blockquote><p>父组件给子组件传入props值被修改时的时候触发</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//新值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//旧值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"One_componentWillReceiveProps"</span><span class="token punctuation">)</span></code></pre><p>shouldComponentUpdate (nextProps)</p><blockquote><p>状态被修改后执行  <strong>必须返回一个bool值</strong> 决定要不要走后续的更新流程 ,<strong>注意参数只有props在父组件传入参数时才可以打印</strong></p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 更新之后值 props</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"One_shouldComponentUpdate"</span><span class="token punctuation">)</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span><span class="token punctuation">;</span>   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>one<span class="token operator">==</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>one<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// false 就停止更新流程</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// true 继续更新流程</span>       <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>componentWillUpdate</p><p>组件更新之前</p><p>render</p><p>更新</p><p>componentDidUpdate</p><p>更新之后</p></blockquote><p><strong>组件销毁阶段</strong></p><pre class=" language-react"><code class="language-react">{    //App.jsx    this.state.bool?(        <Three/>    ):null}<button onClick={this.test.bind(this)}>test</button>//Three.jsxcomponentWillUnmount(){    console.log("组件被销毁");}</code></pre><h3 id="PureComponents"><a href="#PureComponents" class="headerlink" title="PureComponents"></a>PureComponents</h3><blockquote><p>可以对传入参数进行浅比较,如果父组件修改传入参数,与当前组件无关不执行修改逻辑,禁止与shouldComponentUpdate  一块使用</p></blockquote><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li><p>父组件修改状态,内所有子组件都会执行更新流程</p><ul><li>可以使用 PureComponents继承来进行避免</li><li>可以使用shouldComponentUpdate 来进行判断</li></ul></li><li><p>父组件componentDidMount 生命周期 会在内部所有子组件渲染完毕执行</p></li><li><p>在componentWillMount之前修改状态,不会引起render 重新执行</p></li><li><p>ajax一般在componentDidMount 发送</p></li><li><p>UNSAFE_componentWillMount</p><blockquote><p>这里的UNSAFE并不是指安全性，而是表示使用这些生命周期的代码将更有可能在未来的React版本中存在缺陷,17版本之后需要,加这个前缀才可以有效</p></blockquote></li></ul><h3 id="生命周期在线预览"><a href="#生命周期在线预览" class="headerlink" title="生命周期在线预览"></a>生命周期在线预览</h3><h4 id="http-projects-wojtekmaj-pl-react-lifecycle-methods-diagram"><a href="#http-projects-wojtekmaj-pl-react-lifecycle-methods-diagram" class="headerlink" title="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/"></a><a href="http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/" target="_blank" rel="noopener">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></h4><p>生命周期15    渲染界面是异步的,render<img src="./medias/loading2.gif" data-original="G:%5CDocument%5C%E4%B8%89%E9%98%B6%E6%AE%B5%E8%AF%BE%E4%BB%B6%5CReact%5Cmycode%5Creact%E7%AC%94%E8%AE%B0%5CReact%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="React生命周期"></p><p><img src="./medias/loading2.gif" data-original="C:%5CUsers%5C22284%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200222110042541.png" alt="image-20200222110042541"></p><p>16.4</p><p><img src="./medias/loading2.gif" data-original="C:%5CUsers%5C22284%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200222110100516.png" alt="image-20200222110100516"></p><p><strong>执行顺序：15版本的老生命周期</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//挂载过程</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">// 上面都同步</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//说明渲染是异步的 所以没有在render前面掉Didmount</span><span class="token comment" spellcheck="true">//更新 两种情况  一种是父组件变化，</span><span class="token function">componentWillReveiveProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">componentWillUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//更新  自己变化</span><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">componentWillUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">conponentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//卸载</span><span class="token function">componentWillunmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="16版本生命周期"><a href="#16版本生命周期" class="headerlink" title="16版本生命周期"></a>16版本生命周期</h3><p>相对于15版本，16版本新增加两个方法，准备删除了三个方法</p><p>新添加的两个方法</p><blockquote><p>static  getDerivedStateFromProps(props, state)      静态方法，注意不能用this</p><p>getSnapshotBeforeUpdate(prevProps, prevState)</p></blockquote><p>准备删除的三个方法(在17版本删除)</p><blockquote><p>componentWillMount()</p><p>componentWillUpdate()</p><p>componentWillRecieveProps()</p></blockquote><p> <strong>新生命周期 16 版本</strong></p><p><strong>运行顺序</strong></p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//挂载过程</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 以上同步</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//异步渲染</span><span class="token comment" spellcheck="true">//当组件的 props 或 state 发生变化时会触发更新</span><span class="token comment" spellcheck="true">// 更新过程  父组件变化</span><span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 更新过程  自己变化 </span><span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">getSnapshotBeforeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//卸载</span><span class="token function">componentWillUnmount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//当渲染过程，生命周期或子组件的构造函数中抛出错误</span><span class="token keyword">static</span> <span class="token function">getDerivedStateFromError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">componentDidCatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="强制更新-forceUpdate"><a href="#强制更新-forceUpdate" class="headerlink" title="强制更新  forceUpdate()"></a>强制更新  forceUpdate()</h5><blockquote><p>默认情况下，组件的state和props发生变化的时候，组件将重新渲染，如果render()方法依赖于其他数据，则可以<strong>调用forceUpdate() 强制让组件重新渲染</strong>，调用forceUpdate() 将让组件跳过shouldComponentUpdate()</p></blockquote><h4 id="static-getDerivedStateFromProps-props-state"><a href="#static-getDerivedStateFromProps-props-state" class="headerlink" title="static   getDerivedStateFromProps(props, state)"></a>static   getDerivedStateFromProps(props, state)</h4><blockquote><p>getDerivedStateFromProps() 会在render方法之前调用，并且会在初始化挂载和后续更新时候都会被调用,不管怎样，在每次渲染的时候都会触发这个方法，与老版本的生命周期 componentWillReciveProps 不一样，componentWillReceiveProps 仅在父组件重新渲染的时候触发，而不是在内部调用setState的时候</p></blockquote><blockquote><p>注意： 16.3版本中，只有挂载和   props更新的时候才会执行getDerivedStateFromProps()</p><pre><code>  16.4 版本，挂载和props更新，setState和forceUpdate都会执行 getDerivedStateFromProps</code></pre></blockquote><h4 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)"></a>shouldComponentUpdate(nextProps, nextState)</h4><blockquote><p>根据shouldComponentUpdate() 的返回值来判断输出是否受到当前state或props更改的影响， 当 props 或 state 发生变化时，<code>shouldComponentUpdate()</code> 会在渲染执行之前被调用。返回值默认为 true。 返回为false将不会调用componentWillUpdate()  render()  componentDidUpdate()</p><p>使用 forceUpdate() 不会调用该方法）（强制更新）</p><p>在这个生命周期可以考虑性能优化，PureComponent 就是利用这个原理，会对props和state进行浅比较</p></blockquote><h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><h4 id="getSnapshotBeforeUpdate-prevProps-prevState"><a href="#getSnapshotBeforeUpdate-prevProps-prevState" class="headerlink" title="getSnapshotBeforeUpdate(prevProps, prevState)"></a>getSnapshotBeforeUpdate(prevProps, prevState)</h4><blockquote><p>此生命周期的任何返回值将作为参数传递给componentDidUpdate() 的snapshot参数</p></blockquote><h4 id="componentDidUpdate-prevProps-prevState-snapshot"><a href="#componentDidUpdate-prevProps-prevState-snapshot" class="headerlink" title="componentDidUpdate(prevProps, prevState, snapshot)"></a>componentDidUpdate(prevProps, prevState, snapshot)</h4><blockquote><p>componentDidUpdate(prevProps, prevState, snapshot) 会在更新之后被立即调用，首次渲染不会执行此方法</p><p>如果组件实现了 getsnapshotBeforeUpdate() 生命周期，则他的返回值将作为componentDidUpdate() 的第三个参数 “ snapshot” 参数传递，否则该参数为undefined</p><p>如果 shouldComponentUpdate() 返回false。则不会调用componentDidUpdate()</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">,</span> prevState<span class="token punctuation">,</span> snapshot<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//组件更新后可以在此处进行操作，也可以直接调用setStae()或者进行网络请求。但是注意要对更新前后的props进行比较，不然会导致死循环，</span><span class="token comment" spellcheck="true">//例如</span><span class="token function">componentDidUpdate</span><span class="token punctuation">(</span>prevProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//典型用法，不要忘记比较props</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>userID <span class="token operator">!==</span> precProps<span class="token punctuation">.</span>userID <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>userID<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><blockquote><p>componentWillUnmount()会在组件卸载及销毁之前直接调用。在此方法中执行必要的清理操作，例如，清除 timer，取消网络请求或清除在 componentDidMount() 中创建的订阅等。</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//componentWillUnmount() 中不应调用 setState()，因为该组件将永远不会重新渲染。组件实例卸载后，将永远不会再挂载它。</span></code></pre><p><img src="./medias/loading2.gif" data-original="C:%5CUsers%5C22284%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200221224655079.png" alt=" "></p><p><img src="./medias/loading2.gif" data-original="C:%5CUsers%5C22284%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200221224628866.png" alt="image-20200221224628866"></p>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 生命周期 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redux和React-Redux</title>
      <link href="/2020/02/19/redux/"/>
      <url>/2020/02/19/redux/</url>
      
        <content type="html"><![CDATA[<h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><blockquote><p>Redux 只是一种状态管理的解决方案</p></blockquote><p>​    三大原则： 单一数据源       </p><p>​                             State是只读的，数据可追溯   </p><p>​                            使用纯函数来执行修改</p><ol><li>Store :  数据仓库，保存数据的地方</li><li>State： 对象，包含了整个应用所需要到的数据？ 数据仓库里的所有数据都放在一个state里</li><li>Action :  一个动作，触发一个事件或者方法，然后来改变数据</li><li>Dispatch : 将动作触发成方法</li><li>Reducer : 是一个函数，通过获取动作，改变数据，生成一个新的state,从而改变页面</li></ol><blockquote><p>初始化数据 ,创建一个数据仓库，将reducer传入进去，注意  reducer是一个函数</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">"./reducer"</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><blockquote><p>获取数据   利用store.getState() 获取仓库里面的数据  利用store.dispatch() 发送方法</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// App.js 中在state中获取，然后在视图中渲染出来</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> num <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span>num<span class="token punctuation">}</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>              store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//派发action 让reducer去调用方法改变数据</span>            type<span class="token punctuation">:</span> <span class="token string">"HHHH"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><blockquote><p>修改数据（通过动作修改数据）通过 reducer 函数      </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// reducer 文件</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//给仓库里设置默认值，设置数据</span>  num<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"HHHH"</span><span class="token punctuation">:</span>      state<span class="token punctuation">.</span>num<span class="token operator">++</span>      <span class="token keyword">return</span> state    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// return state</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> reducer</code></pre><blockquote><p>修改视图（监听数据的变化，重新渲染内容）   利用store.subscribe()</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token function">handleUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//改变state中的数据</span>  <span class="token punctuation">}</span> <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleUpdate<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//监听数据的改变</span>  <span class="token punctuation">}</span></code></pre><p>完整代码</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//App.js</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"@/index.scss"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      <span class="token operator">...</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    store<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleUpdate<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> num <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span>num<span class="token punctuation">}</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">"HHHH"</span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span>加<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">handleUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//store index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">"./reducer"</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// store reducer,js</span><span class="token keyword">const</span> defaultState <span class="token operator">=</span> <span class="token punctuation">{</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> defaultState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"HHHH"</span><span class="token punctuation">:</span>      state<span class="token punctuation">.</span>num<span class="token operator">++</span>      <span class="token keyword">return</span> state    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> state  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// return state</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> reducer</code></pre><h3 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h3><blockquote><p>导入react-redux ,在index.js中，暴漏Provider ,然后将store = {store}  的数据导入进去</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span></code></pre><p>完整代码 index.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./index.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> serviceWorker <span class="token keyword">from</span> <span class="token string">'./serviceWorker'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store/index"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token comment" spellcheck="true">// import { MyProvider } from "./components/MyProvider"</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>  <span class="token operator">&lt;</span>Provider store<span class="token operator">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Router<span class="token operator">></span>      <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>Provider<span class="token operator">></span>  <span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>store 文件夹</p><p>里面的index.js 文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token keyword">import</span> reducer <span class="token keyword">from</span> <span class="token string">"./reducer"</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre><p>里面的reducer.js文件，创建多库模式</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token keyword">import</span> nodesReducer <span class="token keyword">from</span> <span class="token string">"../common/nodes/reducer"</span><span class="token keyword">import</span> todosReducer <span class="token keyword">from</span> <span class="token string">"../common/todos/reducer"</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  nodesReducer<span class="token punctuation">,</span>  todosReducer<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> reducer</code></pre><p>nodes 组件</p><p>reducer.js 文件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>  n<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> initialState<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"HHHH"</span><span class="token punctuation">:</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>n<span class="token punctuation">)</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> n<span class="token punctuation">:</span> state<span class="token punctuation">.</span>n <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>actionCreate.js文件 主要是dispatch分发的动作action</p><pre class=" language-js"><code class="language-js"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">isAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      type<span class="token punctuation">:</span> <span class="token string">"HHHH"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>index.jsx 文件   导入react-redux 的 connect, 然后直接可以用this.props 拿里面的state数据和要派发的函数就可以了,</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">//  import store from "../../store/index"</span><span class="token keyword">import</span> actionCreate <span class="token keyword">from</span> <span class="token string">"./actionCreate"</span>     <span class="token comment" spellcheck="true">//导入那个派发的动作</span><span class="token keyword">import</span> <span class="token punctuation">{</span> connect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span>          <span class="token keyword">class</span> <span class="token class-name">Nodes</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// constructor(props) {</span>  <span class="token comment" spellcheck="true">//   super(props)</span>  <span class="token comment" spellcheck="true">//   this.state = {</span>  <span class="token comment" spellcheck="true">//     value: store.getState().nodesReducer.n</span>  <span class="token comment" spellcheck="true">//   }</span>  <span class="token comment" spellcheck="true">//   store.subscribe(() => {</span>  <span class="token comment" spellcheck="true">//     this.setState({</span>  <span class="token comment" spellcheck="true">//       value: store.getState().nodesReducer.n</span>  <span class="token comment" spellcheck="true">//     })</span>  <span class="token comment" spellcheck="true">//   })</span>  <span class="token comment" spellcheck="true">// }</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>nodesReducer<span class="token punctuation">.</span>n<span class="token punctuation">}</span>       <span class="token comment" spellcheck="true">// 直接用this.props取值</span>        <span class="token operator">&lt;</span>div<span class="token operator">></span>          <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>isAction<span class="token punctuation">}</span> <span class="token operator">></span><span class="token operator">+</span><span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token comment" spellcheck="true">// 直接调用isAction就可以了</span>        <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> mapStateToProps <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//把仓库里的state里的数据映射到当前组件的props 上</span>  <span class="token keyword">return</span> state<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// const mapDispatchToProps = dispatch => ({</span><span class="token comment" spellcheck="true">//   handleAdd() {</span><span class="token comment" spellcheck="true">//     dispatch(actionCreate.isAction());</span><span class="token comment" spellcheck="true">//   }</span><span class="token comment" spellcheck="true">// })</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">connect</span><span class="token punctuation">(</span>mapStateToProps<span class="token punctuation">,</span> actionCreate<span class="token punctuation">)</span><span class="token punctuation">(</span>Nodes<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
            <tag> React-Redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hooks他来了</title>
      <link href="/2020/02/18/hooks-ta-lai-liao/"/>
      <url>/2020/02/18/hooks-ta-lai-liao/</url>
      
        <content type="html"><![CDATA[<p>正在手码中<del>~</del></p>]]></content>
      
      
      <categories>
          
          <category> Hooks </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识TypeScript</title>
      <link href="/2020/02/17/chu-shi-typescript/"/>
      <url>/2020/02/17/chu-shi-typescript/</url>
      
        <content type="html"><![CDATA[<h2 id="关于-TypeScript"><a href="#关于-TypeScript" class="headerlink" title="关于 TypeScript"></a>关于 TypeScript</h2><blockquote><p>TypeScript 是 JavaScript 的一个超集，主要提供了<strong>类型系统</strong>和<strong>对 ES6 的支持</strong>，它由 Microsoft 开发，代码开源在github上。 <a href="http://www.typescriptlang.org/" target="_blank" rel="noopener">http://www.typescriptlang.org/</a></p></blockquote><h3 id="TypeScript-增加了代码的可读性和可维护性"><a href="#TypeScript-增加了代码的可读性和可维护性" class="headerlink" title="TypeScript 增加了代码的可读性和可维护性"></a><strong>TypeScript 增加了代码的可读性和可维护性</strong></h3><blockquote><p>可以让编译阶段就可以发现大部分的错误，让你运行的时候不同意出错，而且看类型的定义就知道怎么用</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>全局安装</p><pre class=" language-js"><code class="language-js">npm install <span class="token operator">-</span>g typescrip</code></pre><p>安装完成后就可以创建ts文件了，然后利用tsc 文件名 来将其转换为js 文件，</p><pre class=" language-js"><code class="language-js">tsc 文件名</code></pre><p>创建配置文件 ：在项目根目录中控制台中，利用 tsc –init    创建tsconfig.json 文件</p><pre class=" language-js"><code class="language-js"> tsc <span class="token operator">--</span>init</code></pre><p>启动监听   </p><pre class=" language-js"><code class="language-js">tsc <span class="token operator">-</span>w</code></pre><p>点击菜单  任务–运行任务  点击tsc  监视tsconfig.json  然后就可以自己生成代码了</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p> 为了使编写代码更规范，更利用维护，增加了类型校验 写ts代码必须指定类型</p></blockquote><blockquote><p>布尔类型（ boolean ）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> flag<span class="token punctuation">:</span>boolean <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   </code></pre><blockquote><p>数字类型  （number）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num<span class="token punctuation">:</span>number <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span></code></pre><blockquote><p>字符串类型  （string）  </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> str<span class="token punctuation">:</span>string <span class="token operator">=</span> <span class="token string">"DanielLee"</span></code></pre><blockquote><p>数组类型  ( array )</p><p>定义数组两种定义方式：</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token number">1</span><span class="token punctuation">.</span>  <span class="token keyword">var</span> arr<span class="token punctuation">:</span> number<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>   表示所有数组的元素都必须是数字 <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token keyword">var</span> arr<span class="token punctuation">:</span> Array<span class="token operator">&lt;</span>number<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">]</span>  泛型   所有数组的元素都必须是数字</code></pre><blockquote><p>元组类型 （tuple） 属于数组的一种</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> arr<span class="token punctuation">:</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span>string<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token string">'this is ts'</span><span class="token punctuation">]</span>  给数组种每一个位置指定类型</code></pre><blockquote><p>枚举类型  （enum）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">enum</span> Flag <span class="token punctuation">{</span>    success <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>    error <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> s<span class="token punctuation">:</span>Flag <span class="token operator">=</span> Flag<span class="token punctuation">.</span>success<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">enum</span> color <span class="token punctuation">{</span>blue<span class="token punctuation">,</span>red<span class="token punctuation">,</span><span class="token string">'orange'</span><span class="token punctuation">}</span><span class="token keyword">let</span> c<span class="token punctuation">:</span>color <span class="token operator">=</span> color<span class="token punctuation">.</span>redconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//1 如果标识符没有赋值，他的值就是下标</span><span class="token keyword">var</span> c<span class="token punctuation">:</span>color <span class="token operator">=</span> color<span class="token punctuation">.</span>orange<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//4</span>只要改变了一个元素的值，其后面元素的值就会接着前面的值加<span class="token number">1</span>，只影响改变后面的元素</code></pre><blockquote><p>任意类型  （ any ）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num<span class="token punctuation">:</span> any <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//124</span>num <span class="token operator">=</span> <span class="token string">'str'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//str</span></code></pre><blockquote><p>void  类型: 表示没有任何类型。一般用于定义方法的时候方法没有返回值 </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'rum'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>如果方法有返回值，则方法返回什么，类型就设置为啥<span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>number<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>never 类型  (其他类型)的子类型，代表从不会出现的值 包括null和undefined </p><p>这意味着声明never的变量只能被never 类型所赋值</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> a<span class="token punctuation">:</span>undefined   a <span class="token operator">=</span> undefined<span class="token keyword">var</span> b<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>  b <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">var</span> a<span class="token punctuation">:</span>never a<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'错误'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><blockquote><p>null  和 undefined  （其他类型的子类型）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num<span class="token punctuation">:</span>undefined<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span><span class="token keyword">var</span> num<span class="token punctuation">:</span>number <span class="token operator">|</span> undefinrd<span class="token punctuation">;</span>     num<span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 123   num 为undefined 或者num 都不会报错，这属于联合类型 用 | </span><span class="token keyword">var</span> num<span class="token punctuation">:</span>number <span class="token operator">|</span> undefinrd<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// undefined</span>定义未赋值，为undefined</code></pre><blockquote><p>联合类型</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> num<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">;</span>num<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">;</span>若一个元素可能是number类型 或者是<span class="token keyword">null</span> 或者为undefined<span class="token keyword">var</span> num<span class="token punctuation">:</span> number <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">|</span> undefined<span class="token punctuation">;</span>num <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span></code></pre><h3 id="函数定义-定义函数"><a href="#函数定义-定义函数" class="headerlink" title="函数定义(定义函数)"></a>函数定义(定义函数)</h3><blockquote><p>函数声明法</p></blockquote><pre class=" language-js"><code class="language-js"> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token string">'run'</span> <span class="token punctuation">}</span></code></pre><blockquote><p>表达式定义法</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> fun2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>number<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">}</span></code></pre><blockquote><p>ts中定义方法传参</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>age<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span>vara getInfo <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>age<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>方法的可选参数（ts中的实参和形参必须一至，如果不一样（可传可不传）就需要配置可选参数）在参数后面加一个   ？  注意：可选参数必须配置到参数的最后面    </p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- 保密`</span></span><span class="token punctuation">}</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span></code></pre><blockquote><p>默认参数</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">getInfo</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>age<span class="token punctuation">:</span>number<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> --- 保密`</span></span><span class="token punctuation">}</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//zhangsan---20</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//zhangsan --- 30</span></code></pre><blockquote><p>剩余参数</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">...</span>运算符  接受实参传过来的值<span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">...</span>result<span class="token punctuation">:</span>number<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>number<span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>result<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        sum<span class="token operator">+</span><span class="token operator">=</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">}</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><blockquote><p>函数的重载 （同名的函数传入不同的参数实现不同的结果）</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">good</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">good</span><span class="token punctuation">(</span>age<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">good</span><span class="token punctuation">(</span>str<span class="token punctuation">:</span>any<span class="token punctuation">)</span><span class="token punctuation">:</span>any<span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> str <span class="token operator">===</span> <span class="token string">'string'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'我的名字'</span><span class="token operator">+</span> str  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'我的年龄是'</span> <span class="token operator">+</span> str  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">good</span><span class="token punctuation">(</span><span class="token string">'lalala'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//正确</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">good</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//正确</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">good</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//错误写法</span><span class="token keyword">function</span> <span class="token function">good</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">good</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">,</span>age<span class="token punctuation">:</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>number<span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">good</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>any<span class="token punctuation">,</span>age<span class="token operator">?</span><span class="token punctuation">:</span>any<span class="token punctuation">)</span><span class="token punctuation">:</span>any<span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'我的名字'</span><span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'我的年龄'</span> <span class="token operator">+</span> age   <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'我的名字'</span> <span class="token operator">+</span> name  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">good</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span></code></pre><h3 id="typescript-定义类"><a href="#typescript-定义类" class="headerlink" title="typescript 定义类"></a>typescript 定义类</h3><pre class=" language-js"><code class="language-js">    <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>       <span class="token keyword">public</span> name<span class="token punctuation">:</span>string<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//属性  前面省略了public 关键词</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//构造函数</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> n        <span class="token punctuation">}</span>        <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>string<span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">setName</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span>string<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">void</span><span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span> p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h3 id="未完待续。。。。"><a href="#未完待续。。。。" class="headerlink" title="未完待续。。。。"></a>未完待续。。。。</h3>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React路由</title>
      <link href="/2020/02/17/react-lu-you/"/>
      <url>/2020/02/17/react-lu-you/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是路由"><a href="#什么是路由" class="headerlink" title="什么是路由"></a>什么是路由</h3><h4 id="前端路由"><a href="#前端路由" class="headerlink" title="前端路由"></a>前端路由</h4><blockquote><p>根据不同的url切换组件，因为app是浏览器上跑的，所以在web上切换页面要刷新，影响用户体验，所以提出了前端路由，通过前端的路由映射关系来匹配，不会再发起请求</p></blockquote><h4 id="后端路由"><a href="#后端路由" class="headerlink" title="后端路由"></a>后端路由</h4><blockquote><p>根据用户的请求返回不同的内容，由后端直接把页面返回，如果访问人数过多，容易给服务器造成很大的压力</p></blockquote><h3 id="React路由-V5版本"><a href="#React路由-V5版本" class="headerlink" title="React路由      V5版本"></a>React路由      V5版本</h3><blockquote><p>官网：  <a href="https://reacttraining.com/react-router/web/guides/quick-start" target="_blank" rel="noopener">https://reacttraining.com/react-router/web/guides/quick-start</a> </p><p>中文网：  <a href="https://react-router.docschina.org/" target="_blank" rel="noopener">https://react-router.docschina.org/</a> </p></blockquote><pre class=" language-js"><code class="language-js">yarn add react<span class="token operator">-</span>router<span class="token operator">-</span>dom</code></pre><p>下载完成后启动项目，或者使用npm也可以下载</p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p>在index.js路口文件导入</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> <span class="token punctuation">{</span> BrowserRouter <span class="token keyword">as</span> Router <span class="token punctuation">}</span> <span class="token keyword">from</span> react<span class="token operator">-</span>router<span class="token operator">-</span>dom</code></pre><blockquote><p>路由有两种模式： </p><p>​    hash模式（#） HashRouter  通过监听不同的hash值来改变路由   推荐使用</p><p>​    历史记录模式（history） BrowserRouter 刷新需要重新配置请求</p></blockquote><p>然后利用Router将<App/> 包裹</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Router<span class="token operator">></span>   <span class="token operator">&lt;</span>App <span class="token operator">/</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">/</span>Router<span class="token operator">></span></code></pre><p>注意： 路由包裹了App，内部通过context向App的子孙组件去传值，关于context这里不提，可以看另一篇博客React的context</p><h4 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h4><p>先创建两个组件，然后将组件引入</p><p>home组件和Two组件，代码如下</p><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//home组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">index</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        Home      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//two组件</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Two</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        Two      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后在App里面将两个组件引入，然后再引入路由，创建无状态组件404页面，</p><blockquote><p>Switch, Route, NavLink, Redirect, Nav 都是react-router-dom 中的， 注意： exact  表示精确匹配，只有与路径完全一致才会匹配，NavLink和Nav 的区别是前面点击可以加样式，Switch 表示只会显示一个路由，Redirect表示重定向，输入 / 的时候重定向到 /home</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"路径"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>组件<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span>Link to<span class="token operator">=</span><span class="token string">"路径"</span><span class="token operator">></span>点击名<span class="token operator">&lt;</span>Link<span class="token operator">></span><span class="token operator">&lt;</span>Redirect <span class="token keyword">from</span><span class="token operator">=</span><span class="token string">"/"</span> to<span class="token operator">=</span><span class="token string">"/test"</span> exact <span class="token operator">/</span><span class="token operator">></span></code></pre><p>完整代码如下</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./components/home/index"</span><span class="token keyword">import</span> Two <span class="token keyword">from</span> <span class="token string">"./components/two/Two"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Switch<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> NavLink<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token keyword">let</span> notFind <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">404</span>啊<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">"App"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/home"</span><span class="token operator">></span>home<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>      <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/two"</span><span class="token operator">></span>two<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>      <span class="token operator">&lt;</span>Switch<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Home<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/two"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>Two<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Redirect <span class="token keyword">from</span><span class="token operator">=</span><span class="token string">"/"</span> to<span class="token operator">=</span><span class="token string">"/home"</span> exact <span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>notFind<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>有了上面的基础，我们再来写一个多级的嵌套路由,创建一个One 的文件夹，创建OneA和OneB组件，然后在Home中引入，路由使用方式和上面的一样，就是注意重定向问题，直接上码</p><p>这个是改完之后的home组件,OneA组件和OneB组件省略</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Redirect<span class="token punctuation">,</span> Route<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> NavLink <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token keyword">import</span> OneA <span class="token keyword">from</span> <span class="token string">"../one/OneA"</span><span class="token keyword">import</span> OneB <span class="token keyword">from</span> <span class="token string">"../one/OneB"</span><span class="token keyword">const</span> oneFind <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span><span class="token number">404</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">index</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/home/onea"</span><span class="token operator">></span>OneA<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>        <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/home/oneb"</span><span class="token operator">></span>OneB<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>        <span class="token operator">&lt;</span>Switch<span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/onea"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>OneA<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>          <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/home/oneb"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>OneB<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>          <span class="token operator">&lt;</span>Redirect <span class="token keyword">from</span><span class="token operator">=</span><span class="token string">"/home"</span> to<span class="token operator">=</span><span class="token string">"/home/onea"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Redirect<span class="token operator">></span>          <span class="token operator">&lt;</span>Route component<span class="token operator">=</span><span class="token punctuation">{</span>oneFind<span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>Switch<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="React插槽"><a href="#React插槽" class="headerlink" title="React插槽"></a>React插槽</h3><h4 id="this-props-children"><a href="#this-props-children" class="headerlink" title="this.props.children"></a>this.props.children</h4><blockquote><p>this.props.children   可以渲染子组件  类似于vue的插槽</p><p>&lt;组件&gt;</p><p>​    &lt;子组件&gt;</p><p>&lt;/组件&gt;</p><p>this.props.children</p><p>如果有一个子组件，则是一个对象，</p><p>如果是多个子组件，则是一个数组，</p><p>没有则是undefined</p></blockquote><h3 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h3><p>我们在App,js 中写路由 通过 在斜杠后面加：实现动态路由,传值过去，types就是你要传的值</p><pre class=" language-js"><code class="language-js"> <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/list/:types"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>List<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span></code></pre><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//APP</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/list/users"</span><span class="token operator">></span>user<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>        <span class="token operator">&lt;</span>NavLink to<span class="token operator">=</span><span class="token string">"/list/goods"</span><span class="token operator">></span>good<span class="token operator">&lt;</span><span class="token operator">/</span>NavLink<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/list/:types"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>List<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>然后我们创建一个路由组件，通过this.props.match.params.types 来取得传过来的types的值，注意：App.js中要使用withRouter ，若不然没有match这个值，然后在路由组件中要注意判断传过来的值是否与上一次的相等，否则容易造成死循环，一直监听到值的更改，一直发请求</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">ccc</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      list<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">componentDidUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 在这里监听传入的types的值的改变</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> types <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>match<span class="token punctuation">.</span>params<span class="token punctuation">.</span>types    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>type <span class="token operator">!==</span> types<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 注意，这里一定要判断传入的值是否与之前的值相等</span>      <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">"http://rap2api.taobao.org/app/mock/226329/api/"</span> <span class="token operator">+</span> types<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          list<span class="token punctuation">:</span> res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>list<span class="token punctuation">,</span>          type<span class="token punctuation">:</span> types   <span class="token comment" spellcheck="true">//更改types的值</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> list <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span>          list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>li key<span class="token operator">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span><span class="token operator">></span> <span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span> <span class="token punctuation">{</span>item<span class="token punctuation">.</span>mz<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>li<span class="token operator">></span>          <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="编程式路由"><a href="#编程式路由" class="headerlink" title="编程式路由"></a>编程式路由</h3><blockquote><p>注意：编程式路由需要用到history对象，所以也要传入withRouter</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>具体实现代码</p><pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">{</span>  <span class="token function">change</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>types<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/list/"</span> <span class="token operator">+</span> types<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这里是编程时路由跳转</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* &lt;NavLink to="/list/users">user&lt;/NavLink>        &lt;NavLink to="/list/goods">good&lt;/NavLink> */</span><span class="token punctuation">}</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>change<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"users"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>users1<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token comment" spellcheck="true">//传参</span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>change<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">"goods"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token operator">></span>goods1<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>  <span class="token comment" spellcheck="true">//传参</span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/list/:types"</span> component<span class="token operator">=</span><span class="token punctuation">{</span>List<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//注意，这个还是要与上面那个路由组件配合</span></code></pre><h3 id="路由鉴权"><a href="#路由鉴权" class="headerlink" title="路由鉴权"></a>路由鉴权</h3><p>当用户要跳转到two页面的时候，判断有没有登录（即判断有没有cookie）如果有，则登录，如果没有，则重定向到登录页面</p><p>所以，利用了 Route 的另一种形式，render，让Route 可以实现传参</p><pre class=" language-js"><code class="language-js">  <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token string">"/Two"</span> render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">&lt;</span>Two <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token string">"/login"</span> <span class="token operator">/</span><span class="token operator">></span>       <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span> </code></pre><p>将其封装为一个组件 MyRouter, 通过父组件给子组件传参，传入组件和path，下面式封装</p><p><MyRouter path="/two" component={Two}></MyRouter></p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Route<span class="token punctuation">,</span> Redirect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-router-dom"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">MyRouter</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> path<span class="token punctuation">,</span> component<span class="token punctuation">:</span> Com <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>Route path<span class="token operator">=</span><span class="token punctuation">{</span>path<span class="token punctuation">}</span> render<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">// return sessionStorage.getItem("user") ? &lt;Com {...props} /> : &lt;Redirect to="/login"  /></span>          <span class="token keyword">return</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token operator">&lt;</span>Com <span class="token punctuation">{</span><span class="token operator">...</span>props<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">:</span> <span class="token operator">&lt;</span>Redirect to<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> pathname<span class="token punctuation">:</span> <span class="token string">"/login"</span><span class="token punctuation">,</span> state<span class="token punctuation">:</span> <span class="token punctuation">{</span> path <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>Route<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>login 组件</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">login</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  getUser <span class="token operator">=</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>keyCode <span class="token operator">===</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">"admin"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// this.props.history.push("/two")</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//判断用户是否直接登陆进来的</span>          <span class="token comment" spellcheck="true">//tage 就是应该登陆跳转到的路由的路径</span>          <span class="token keyword">var</span> tage <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>location<span class="token punctuation">.</span>state<span class="token punctuation">.</span>path<span class="token punctuation">;</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tage<span class="token punctuation">)</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//用户直接进入的login组件</span>          <span class="token comment" spellcheck="true">//如果用户直接登陆，应该跳转到home页面</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"/two"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> ref<span class="token operator">=</span><span class="token punctuation">{</span>node <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">this</span><span class="token punctuation">.</span>node <span class="token operator">=</span> node<span class="token punctuation">}</span> onKeyUp<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>getUser<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React的非父子传值</title>
      <link href="/2020/02/17/react-de-fei-fu-zi-chuan-zhi/"/>
      <url>/2020/02/17/react-de-fei-fu-zi-chuan-zhi/</url>
      
        <content type="html"><![CDATA[<p>react的父子组件传值大家都已经会了，今天我们来聊聊React的非父子组件传值，他的核心理念就是利用了发布订阅者模式来实现的，到最后，带大家手写一个发布订阅模式来实现react传值</p><h3 id="利用pubsub-js"><a href="#利用pubsub-js" class="headerlink" title="利用pubsub-js"></a>利用pubsub-js</h3><blockquote><p>pubsub-js 是别人已经封装好的一个库，只需要在项目中下载就可以使用，下面带来演示一下基本用法</p></blockquote><p>例如我们有两个组件，one组件和two组件，现在我们利用这个库来实现两个组件之间的传值</p><p>首先引入<em>pubsub-js</em> 在one组件里面</p><blockquote><p>利用 PubSub.publish(“事件名”, “要传的数据”)来创建</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">//引入pubsub-js</span><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">"pubsub-js"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">One</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  send <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    PubSub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span><span class="token string">"evtBus"</span><span class="token punctuation">,</span> <span class="token string">"hello word"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>button onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>send<span class="token punctuation">}</span><span class="token operator">></span>非父子传值<span class="token punctuation">,</span>给Two传值<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Two组件里面去接受</p><blockquote><p>利用PubSub.subscribe(“事件名”，（msg , data）=&gt; {})</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> PubSub <span class="token keyword">from</span> <span class="token string">"pubsub-js"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Two</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>      data<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>    PubSub<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"evtBus"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> data<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//事件名</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Hello word</span>      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        data      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token punctuation">{</span>data<span class="token punctuation">}</span>      <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="自己封装eventBus"><a href="#自己封装eventBus" class="headerlink" title="自己封装eventBus"></a>自己封装eventBus</h3><blockquote><p>创建一个observer.js文件</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> EventBus <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建一个空对象用来存储事件</span><span class="token keyword">const</span> on <span class="token operator">=</span> <span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> callBack<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>EventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        EventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    EventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>callBack<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断如果么有这个事件名就将创建  </span><span class="token punctuation">}</span><span class="token keyword">const</span> emit <span class="token operator">=</span> <span class="token punctuation">(</span>eventName<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>EventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//如果没有事件名直接退出</span>    EventBus<span class="token punctuation">[</span>eventName<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">item</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//取出传递的值</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//暴露方法</span>    $on<span class="token punctuation">:</span> on<span class="token punctuation">,</span>    $emit<span class="token punctuation">:</span> emit<span class="token punctuation">}</span></code></pre><p>这样就完成一个eventBus了，再调用的时候就可以引入observer.js文件，</p><pre class=" language-js"><code class="language-js"> observer<span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token string">"码梦为生"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//传递事件</span> observer<span class="token punctuation">.</span><span class="token function">$on</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>payload<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//取出参数 码梦为生</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端常见的攻击</title>
      <link href="/2020/02/16/qian-duan-chang-jian-de-gong-ji/"/>
      <url>/2020/02/16/qian-duan-chang-jian-de-gong-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前端常见的攻击主要有 XSS     CSRF(跨站请求伪造)    点击劫持    中间人攻击</p></blockquote><h3 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h3><blockquote><p>攻击者将可执行代码注入到网页中 （总体分为持久型和非持久型）</p></blockquote><h4 id="持久性"><a href="#持久性" class="headerlink" title="持久性"></a>持久性</h4><blockquote><p>持久性就是将攻击的代码写入到数据库中，大量正常访问页面的用户都会受到攻击，如评论功能</p></blockquote><h4 id="非持久性"><a href="#非持久性" class="headerlink" title="非持久性"></a>非持久性</h4><blockquote><p>非持久性就是一般通过修改url参数的方式加入攻击代码，诱导用户访问链接而进行攻击<br> 利用转义字符将引号尖括号斜杠进行转义<br>  对于显示富文本来说不能利用转义，会把需要的格式也过滤掉，所以利用白名单的方式开启白名单有两种方式，第一：设置HTTP Header中Content-Security-Policy,让他只允许加载本站资源或者s协议图片</p></blockquote><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><blockquote><p>攻击者构造出一个后端请求地址，诱导用户点击发起请求，如果用户登录状态下，后端就以为是用户操作，从而进行相应的逻辑<br>防御： Get请求不对数据进行修改，不让第三方网站访问到用户Cookie 阻止第三方网站请求接口，每次请求时附带token</p></blockquote><h3 id="点击劫持攻击"><a href="#点击劫持攻击" class="headerlink" title="点击劫持攻击"></a>点击劫持攻击</h3><blockquote><p>需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击<br>X-FRAME-OPTIONS 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头 就是为了防御用 iframe 嵌套的点击劫持攻击。</p></blockquote><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><blockquote><p>中间人攻击是攻击方同时与服务端和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。攻击者不仅能获得双方的通信信息，还能修改通信信息。<br>HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js垃圾回收机制</title>
      <link href="/2020/02/16/js-la-ji-hui-shou-ji-zhi/"/>
      <url>/2020/02/16/js-la-ji-hui-shou-ji-zhi/</url>
      
        <content type="html"><![CDATA[<h3 id="回收机制介绍"><a href="#回收机制介绍" class="headerlink" title="回收机制介绍"></a>回收机制介绍</h3><p>v8 将内存(堆)分为新生代和老生代两部分</p><h4 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h4><blockquote><p>新生代中的对象一般存活时间较短，使用 Scavenge GC 算法。</p><p>在新生代空间中，内存空间分为两部分，分别为 From 空间和 To 空间。在这两个空间中，必定有一个空间是使用的，另一个空间是空闲的。新分配的对象会被放入 From 空间中，当 From 空间被占满时，新生代 GC 就会启动了。算法会检查 From 空间中存活的对象并复制到 To 空间中，如果有失活的对象就会销毁。当复制完成后将 From 空间和 To 空间互换，这样 GC 就结束了。</p></blockquote><h4 id="老生代"><a href="#老生代" class="headerlink" title="老生代"></a>老生代</h4><blockquote><p>老生代中的对象一般存活时间较长且数量也多，使用了两个算法，分别是标记清除算法和标记压缩算法。</p></blockquote><p>在讲算法前，先来说下什么情况下对象会出现在老生代空间中：</p><p>新生代中的对象是否已经经历过一次 Scavenge 算法，如果经历过的话，会将对象从新生代空间移到老生代空间中。<br>To 空间的对象占比大小超过 25 %。在这种情况下，为了不影响到内存分配，会将对象从新生代空间移到老生代空间中。<br>在老生代中，以下情况会先启动标记清除算法：</p><p>某一个空间没有分块的时候<br>空间中被对象超过一定限制<br>空间不能保证新生代中的对象移动到老生代中<br>在这个阶段中，会遍历堆中所有的对象，然后标记活的对象，在标记完成后，销毁所有没有被标记的对象。</p><p>在标记大型对内存时，可能需要几百毫秒才能完成一次标记。这就会导致一些性能上的问题。为了解决这个问题，2011 年，V8 从 stop-the-world 标记切换到增量标志。在增量标记期间，GC 将标记工作分解为更小的模块，可以让 JS 应用逻辑在模块间隙执行一会，从而不至于让应用出现停顿情况。但在 2018 年，GC 技术又有了一个重大突破，这项技术名为并发标记。该技术可以让 GC 扫描和标记对象时，同时允许 JS 运行，你可以清除对象后会造成堆内存出现碎片的情况，当碎片超过一定限制后会启动压缩算法。在压缩过程中，将活的对象像一端移动，直到所有对象都移动完成然后清理掉不需要的内存。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 原生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数的节流与防抖</title>
      <link href="/2020/02/16/han-shu-de-jie-liu-yu-fang-dou/"/>
      <url>/2020/02/16/han-shu-de-jie-liu-yu-fang-dou/</url>
      
        <content type="html"><![CDATA[<h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>例如 窗口调整  页面滚动  购物疯狂点击</p><blockquote><p>函数节流就是预定一个函数只有在大于等于执行周期时候才会执行，周期内调用不执行</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span>wait<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> lastTime <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> nowTime <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nowTime <span class="token operator">-</span> lastTime <span class="token operator">></span> wait<span class="token punctuation">)</span><span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>      lastTime <span class="token operator">=</span> nowTime    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><blockquote><p>函数防抖函数的防抖就是函数需要频繁触发情况时候，只有足够空闲的时间，才执行一次，</p><p>如  实时搜索  和 拖拽中</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>func<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span>    timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>      func<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>arguments<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>delay<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http和Https那些事</title>
      <link href="/2020/02/16/http-he-https-na-xie-shi/"/>
      <url>/2020/02/16/http-he-https-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="谈谈http和https的区别"><a href="#谈谈http和https的区别" class="headerlink" title="谈谈http和https的区别"></a>谈谈http和https的区别</h3><blockquote><p>http默认端口是80，https默认端口是443<br>http是超文本传输协议，信息是明文传输，客户端和服务端都无法验证对方的身份，https是由ssl+http协议构建的可进行加密传输身份认证的网络协议<br>http效率更高，https安全性高</p></blockquote><h3 id="常见的http状态码"><a href="#常见的http状态码" class="headerlink" title="常见的http状态码"></a>常见的http状态码</h3><blockquote><p>200 请求成功  202 服务器已经接受了请求，但是还没有对其进行处理 204服务器成功处理请求但未返回内容<br>301 永久重定向 请求的网页已被永久移动到新位置，服务器返回此响应时，会自动将请求者转到新位置<br>302 临时重定向 服务器正从不同的位置网页响应请求，但请求者仍然可以使用原有位置进行请求，如新浪<br>304 代表缓存<br>401 身份验证错误，未授权<br>403 服务器拒绝请求<br>404 未找到<br>500 服务器错误<br>501 服务器无法识别，不具备完成请求的功能<br>503 服务不可用</p></blockquote><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><blockquote><p>发送端发送一个带有SYN的数据包给对方，<br>接收端收到后，回传一个带有SYN/ACK标志的数据包传递确认信息，表示收到了<br>发送端再回传一个ACK标志的数据包，握手结束</p></blockquote><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><blockquote><p>如主动关闭方是客户端，客户端发送一个FIN用来关闭与服务端的数据传输，客户端进入FIN_WAIT_1状态<br>服务端收到FIN后，发送一个ACK给客户端，确认序号为收到序号+1，服务端进入CLOSE_WAIT状态<br>服务端发送一个FIN，用来关闭客户端和服务端的数据传送<br>客户端收到FIN后，发送一个ACK给服务端，服务端进入关闭状态，完成四次挥手</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> javascript </tag>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初遇Vue</title>
      <link href="/2020/02/16/chu-yu-vue/"/>
      <url>/2020/02/16/chu-yu-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><blockquote><p>Vue是一套用于构建用户界面的<strong>渐进式框架</strong>。与其它大型框架不同的是，Vue 被设计为可以自底向上逐层应用。Vue 的核心库只关注视图层，不仅易于上手，还便于与第三方库或既有项目整合。另一方面，当与<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noopener">现代化的工具链</a>以及各种<a href="https://github.com/vuejs/awesome-vue#libraries--plugins" target="_blank" rel="noopener">支持类库</a>结合使用时，Vue 也完全能够为复杂的单页应用提供驱动。 </p></blockquote><h3 id="v-model原理"><a href="#v-model原理" class="headerlink" title="v-model原理"></a>v-model原理</h3><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>div id <span class="token operator">=</span> <span class="token string">"app"</span><span class="token operator">></span>     <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> <span class="token punctuation">:</span>value<span class="token operator">=</span><span class="token string">"message"</span> @input<span class="token operator">=</span><span class="token string">"message = $event.target.value"</span><span class="token operator">></span>      <span class="token punctuation">{</span><span class="token punctuation">{</span>message<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>     <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      el<span class="token punctuation">:</span><span class="token string">'#app'</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span><span class="token punctuation">{</span>        message<span class="token punctuation">:</span><span class="token string">''</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      methods<span class="token punctuation">:</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// change(event){</span>        <span class="token comment" spellcheck="true">//   console.log(event)</span>        <span class="token comment" spellcheck="true">//   this.message = event.target.value</span>        <span class="token comment" spellcheck="true">// }</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><h3 id="常见指令"><a href="#常见指令" class="headerlink" title="常见指令"></a>常见指令</h3><pre class=" language-js"><code class="language-js">v<span class="token operator">-</span><span class="token keyword">for</span>  v<span class="token operator">-</span>show  v<span class="token operator">-</span>html  v<span class="token operator">-</span>text  v<span class="token operator">-</span><span class="token keyword">if</span> v<span class="token operator">-</span><span class="token keyword">else</span><span class="token operator">-</span><span class="token keyword">if</span> v<span class="token operator">-</span><span class="token keyword">else</span></code></pre><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>在事件后面调用</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>button @click<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"test2"</span><span class="token operator">></span>test2<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>      <span class="token comment" spellcheck="true">//阻止事件冒泡</span><span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">"submit"</span> @click<span class="token punctuation">.</span>prevent<span class="token punctuation">.</span>stop<span class="token operator">=</span><span class="token string">"test3"</span><span class="token operator">></span>提交<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>   <span class="token comment" spellcheck="true">//阻止默认行为</span> <span class="token comment" spellcheck="true">//vue封装常用键位</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> @keydown<span class="token punctuation">.</span>enter<span class="token operator">=</span><span class="token string">"test4"</span><span class="token operator">></span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> @keydown<span class="token punctuation">.</span>up<span class="token operator">=</span><span class="token string">"test4"</span><span class="token operator">></span>  <span class="token comment" spellcheck="true">// 过滤值为数字类型</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token string">"strVal"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>strVal<span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token operator">===</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token keyword">typeof</span> strVal<span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">//  过滤字符串空格</span>      <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> v<span class="token operator">-</span>model<span class="token punctuation">.</span>trim<span class="token operator">=</span><span class="token string">"trimStr"</span><span class="token operator">></span><span class="token punctuation">{</span><span class="token punctuation">{</span>trimStr<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="动态样式"><a href="#动态样式" class="headerlink" title="动态样式"></a>动态样式</h3>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器缓存的那些事</title>
      <link href="/2020/02/14/liu-lan-qi-huan-cun/"/>
      <url>/2020/02/14/liu-lan-qi-huan-cun/</url>
      
        <content type="html"><![CDATA[<h3 id="浏览器缓存能做什么"><a href="#浏览器缓存能做什么" class="headerlink" title="浏览器缓存能做什么"></a>浏览器缓存能做什么</h3><p>浏览器缓存可以帮助我们在网路请求和浏览器响应中优化性能</p><h3 id="浏览器缓存的位置"><a href="#浏览器缓存的位置" class="headerlink" title="浏览器缓存的位置"></a>浏览器缓存的位置</h3><p>浏览器在缓存位置上有四种，各自有优先级依次查找缓存没有命中的时候，才会去请求网路</p><h4 id="1-Service-Worker"><a href="#1-Service-Worker" class="headerlink" title="1.Service Worker"></a>1.Service Worker</h4><blockquote><p>运行在浏览器背后的独立线程,使用这个传输协议必须为HTTPS。实现缓存功能分为三个步骤，首先注册service Worker 然后监听到install事件以后就可以缓存需要的文件，在下次用户访问的时候就可以通过拦截请求的方式查询是否有缓存，有缓存就读取缓存，否则请求数据</p></blockquote><h4 id="2-memory-Cache"><a href="#2-memory-Cache" class="headerlink" title="2. memory Cache"></a>2. memory Cache</h4><blockquote><p>内存缓存 虽然读取高效，可是缓存持续性短，会随着进程的释放而释放，一般来说，大文件大概率不存在内存中，当系统内存使用效率高，文件优先存储到硬盘</p></blockquote><h4 id="3-DisK-cache"><a href="#3-DisK-cache" class="headerlink" title="3. DisK cache"></a>3. DisK cache</h4><blockquote><p>硬盘内存 读取速度慢，什么都可以存储到硬盘中，会根据http Herder 中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求 </p></blockquote><h4 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h4><blockquote><p>以上三种缓存没有命中，才会被使用，并且缓存时间也很短暂，只在会话（session）中存在，一旦会话结束就被释放</p></blockquote><h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><p> 通过设置HTTP Header 来实现  分为强缓存和协商缓存</p><h4 id="强缓存"><a href="#强缓存" class="headerlink" title="强缓存"></a>强缓存</h4><blockquote><p>强缓存可以通过设置两种HTTP Header 实现  Expires 和Cache-Control 强缓存表示在缓存期间不需要请求，State Code 为 200<br>Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效<br>Cache-control 可以在请求头或者响应头中设置，可以配合多个指令配合使用，如 public private max-age=30 s-maxage=30 no-store  no-cache(资源被缓存，但会立即失效)</p></blockquote><h4 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h4><blockquote><p>如果缓存过期了，就需要发起请求验证资源是否有更新，可以设置last-Modified 和ETag</p><p>如果什么缓存策略都没有设置，浏览器会采用一个启发式的算法，通常会取响应头中的date减去last-Modified值的10%作为缓存时间<br>对于频繁变动的资源，首先需要使用 Cache-Control: no-cache 使浏览器每次都请求服务器，然后配合 ETag 或者 Last-Modified 来验证资源是否有效。这样的做法虽然不能节省请求数量，但是能显著减少响应数据大小。</p></blockquote><h3 id="如何防止浏览器缓存"><a href="#如何防止浏览器缓存" class="headerlink" title="如何防止浏览器缓存"></a>如何防止浏览器缓存</h3><blockquote><p>1.在利用ajax请求的时候，在url地址的问号后面加一个时间戳参数，防止浏览器缓存<br>2.使用meta语法 <meta http-equiv="Cache-Control" content="no-cache"><br>3.设置请求头： “Cache-Control”, “no-cache”</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
