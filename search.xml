<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>浅谈Vue的响应式原理</title>
      <link href="/2020/02/15/vue/"/>
      <url>/2020/02/15/vue/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Vue响应式原理**</p><p>1.Vue内部是如何监听到message数据改变的  通过object.defineProperty 来监听对象属性的改变</p><p>2.当数据发生改变，Vue是如何知道要通知哪些线人，让界面发生刷新的。  利用了发布订阅者模式</p></blockquote><pre class=" language-js"><code class="language-js"><span class="token keyword">new</span> <span class="token class-name">Vue</span> 的时候传入了两个一个是el<span class="token punctuation">,</span>一个是data<span class="token punctuation">,</span>两个会走不同的流程，data会被传入到一个Observer对象里面，用来监听劫持所有的data属性，这个观察者对象核心就是做了一个object<span class="token punctuation">.</span>definePrototy<span class="token punctuation">,</span>将data里面的所有数据做了一个监听，监听他的<span class="token keyword">set</span>和<span class="token keyword">get</span>方法，劫持所有的属性，给每一个属性创建一个Dep对象，里面放一个subs数组，里面放watcher1<span class="token punctuation">,</span>watcher2<span class="token operator">...</span>等（创建观察者）将el传入，进行解析（类似于<span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>语法），解析el的时候，根据你使用的data里面的这个数据的key<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span>使用哪个就给哪个创建一个watcher<span class="token punctuation">,</span>将watcher加到subs中去，每使用一个就会执行创建一个新的watcher加入到subs中，除了这样，还会根据el内容初始化界面上显示的内容view，界面上显示的内容就是最初的只，当data中的值改变了之后，observer对data属性做了一个监听，所以会监听到属性发生改变，调用notify函数，notify会遍历subs，也就是里面的watcher<span class="token punctuation">,</span>调用里面的update函数，函数函数做的就是将view上面的数据进行更新<span class="token comment" spellcheck="true">//例子</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    message<span class="token punctuation">:</span> <span class="token string">"哈哈哈"</span>，    name<span class="token punctuation">:</span> <span class="token string">"Daniel"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Object.defineProperty(对象，对象中的key值，{             三个参数</span><span class="token comment" spellcheck="true">//    set(){  }，</span><span class="token comment" spellcheck="true">//    get(){}</span><span class="token comment" spellcheck="true">//})</span>Object<span class="token punctuation">.</span><span class="token function">definedPrototype</span><span class="token punctuation">(</span>对象，对象中的key值，<span class="token punctuation">{</span>    <span class="token keyword">set</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span><span class="token punctuation">{</span>        conosole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"监听"</span><span class="token operator">+</span>key<span class="token operator">+</span>“改变”<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//告诉谁，谁用告诉谁，？谁在用？</span>    <span class="token comment" spellcheck="true">//根据解析html代码，或起到那些人有用属性，谁在用，谁就会调用一次get,然后就利用了发布订阅模式</span>        value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span>        dep<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//调用这个notify函数去通知</span>    <span class="token punctuation">}</span>，    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"获取"</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">"改变"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//张三： get ---》 update</span>        <span class="token keyword">return</span> value    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"kobe"</span><span class="token comment" spellcheck="true">//发布订阅模式</span><span class="token comment" spellcheck="true">//发布者</span><span class="token keyword">class</span> <span class="token class-name">Dep</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//记录谁要订阅我们的属性（用这个数组记录所有的订阅者）</span>    <span class="token punctuation">}</span>    <span class="token function">addSub</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>subs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            item<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 订阅者</span><span class="token keyword">class</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"发生update"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">)</span>dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>w1<span class="token punctuation">)</span><span class="token keyword">const</span> w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token string">'李四'</span><span class="token punctuation">)</span>dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>w2<span class="token punctuation">)</span><span class="token keyword">const</span> w3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token string">'王五'</span><span class="token punctuation">)</span>dep<span class="token punctuation">.</span><span class="token function">addSub</span><span class="token punctuation">(</span>w3<span class="token punctuation">)</span>我们把多个订阅者对象添加到发布者里面，只要发布者调用自己的notify，就会通知订阅者（数组）更新自己的update<span class="token punctuation">,</span>就是订阅者调用自己的update</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 框架 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遇见hexo</title>
      <link href="/2020/02/14/yu-jian-hexo/"/>
      <url>/2020/02/14/yu-jian-hexo/</url>
      
        <content type="html"><![CDATA[<pre class=" language-js"><code class="language-js">Hello hexo</code></pre><blockquote><p>第一篇博客</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/14/hello-world/"/>
      <url>/2020/02/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
